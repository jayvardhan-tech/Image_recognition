# -*- coding: utf-8 -*-
"""Image recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aKlFck0e2nqMbgEMWvfJ5ykT2aqDXdeL
"""



"""**mnist** **dataset**
**FASHION** **MNIST** **DATASET**
"""

from tensorflow.keras.datasets import fashion_mnist
(x_train,y_train), (x_test,y_test) = fashion_mnist.load_data()

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

#labels
label = 't-shirt/top trouser pullover dress coat sandal shirt sneaker bag ankle-boot'
label = label.split()
label

x_train[1800].max()

x_train[1800].min()

#normalise the data of x_train
#simplest way to normalize is devide by 255
x_tarin = x_train/255.0
x_test = x_test/255.0

import matplotlib.pyplot as plt
plt.imshow(x_train[345],cmap = 'gray')
plt.show()
print(f"output :{label[y_train[345]]}")   #formatted dtring to print the output
#output

x_train[1751].shape

#define the neural network architecture
from tensorflow import keras
model = keras.models.Sequential()      #simple neural network
#3 layer
#1 input
#2 hidden
#3 output
# to add neuron to all 3 layer
model.add(keras.layers.Flatten())      #28*28 grayscale images = 784 neurons for input layer 
model.add(keras.layers.Dense(512,input_shape= (28,28), activation = 'relu'))    #hidden layer neuron #2/3*784-10 = 512
model.add(keras.layers.Dense(10,activation = 'softmax'))

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

model.fit(x_train,y_train, epochs= 10)
#60000/32=1875

mod1 = model.fit(x_train,y_train, epochs= 10)

model.get_weights()

y_pred = model.predict(x_test)
y_pred

#y_pred = model.predict(x_test)    this gives only probability
import numpy as np
y_pred = np.argmax(y_pred,axis =1)
y_pred

y_test

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

y_pred = model.predict(x_test[789].reshape(1,28,28))
y_pred = np.argmax(y_pred)
y_pred
plt.imshow(x_test[67])
print([label[y_pred]])